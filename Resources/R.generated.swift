//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.image` struct is generated, and contains static references to 10 images.
  struct image {
    /// Image `annotation`.
    static let annotation = Rswift.ImageResource(bundle: R.hostingBundle, name: "annotation")
    /// Image `broken-clouds`.
    static let brokenClouds = Rswift.ImageResource(bundle: R.hostingBundle, name: "broken-clouds")
    /// Image `clear-sky`.
    static let clearSky = Rswift.ImageResource(bundle: R.hostingBundle, name: "clear-sky")
    /// Image `few-clouds`.
    static let fewClouds = Rswift.ImageResource(bundle: R.hostingBundle, name: "few-clouds")
    /// Image `mist`.
    static let mist = Rswift.ImageResource(bundle: R.hostingBundle, name: "mist")
    /// Image `rain`.
    static let rain = Rswift.ImageResource(bundle: R.hostingBundle, name: "rain")
    /// Image `scattered-clouds`.
    static let scatteredClouds = Rswift.ImageResource(bundle: R.hostingBundle, name: "scattered-clouds")
    /// Image `shower-rain`.
    static let showerRain = Rswift.ImageResource(bundle: R.hostingBundle, name: "shower-rain")
    /// Image `snow`.
    static let snow = Rswift.ImageResource(bundle: R.hostingBundle, name: "snow")
    /// Image `thunderstorm`.
    static let thunderstorm = Rswift.ImageResource(bundle: R.hostingBundle, name: "thunderstorm")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "annotation", bundle: ..., traitCollection: ...)`
    static func annotation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.annotation, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "broken-clouds", bundle: ..., traitCollection: ...)`
    static func brokenClouds(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brokenClouds, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "clear-sky", bundle: ..., traitCollection: ...)`
    static func clearSky(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clearSky, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "few-clouds", bundle: ..., traitCollection: ...)`
    static func fewClouds(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fewClouds, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "mist", bundle: ..., traitCollection: ...)`
    static func mist(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mist, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "rain", bundle: ..., traitCollection: ...)`
    static func rain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "scattered-clouds", bundle: ..., traitCollection: ...)`
    static func scatteredClouds(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scatteredClouds, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "shower-rain", bundle: ..., traitCollection: ...)`
    static func showerRain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.showerRain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "snow", bundle: ..., traitCollection: ...)`
    static func snow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.snow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "thunderstorm", bundle: ..., traitCollection: ...)`
    static func thunderstorm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.thunderstorm, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.common` struct is generated, and contains static references to 2 localization keys.
    struct common {
      /// Value: An error has occurred
      static let errorTitle = Rswift.StringResource(key: "errorTitle", tableName: "Common", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ok
      static let okTitle = Rswift.StringResource(key: "okTitle", tableName: "Common", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: An error has occurred
      static func errorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTitle", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "errorTitle"
        }

        return NSLocalizedString("errorTitle", tableName: "Common", bundle: bundle, comment: "")
      }

      /// Value: Ok
      static func okTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("okTitle", tableName: "Common", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Common", preferredLanguages: preferredLanguages) else {
          return "okTitle"
        }

        return NSLocalizedString("okTitle", tableName: "Common", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.map` struct is generated, and contains static references to 2 localization keys.
    struct map {
      /// Value: Global Weather
      static let navBarTitle = Rswift.StringResource(key: "navBarTitle", tableName: "Map", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show Weather
      static let showWeatherButtonTitle = Rswift.StringResource(key: "showWeatherButtonTitle", tableName: "Map", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Global Weather
      static func navBarTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("navBarTitle", tableName: "Map", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Map", preferredLanguages: preferredLanguages) else {
          return "navBarTitle"
        }

        return NSLocalizedString("navBarTitle", tableName: "Map", bundle: bundle, comment: "")
      }

      /// Value: Show Weather
      static func showWeatherButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("showWeatherButtonTitle", tableName: "Map", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Map", preferredLanguages: preferredLanguages) else {
          return "showWeatherButtonTitle"
        }

        return NSLocalizedString("showWeatherButtonTitle", tableName: "Map", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.weather` struct is generated, and contains static references to 7 localization keys.
    struct weather {
      /// Value: HUMIDITY
      static let humiditY = Rswift.StringResource(key: "HUMIDITY", tableName: "Weather", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Map
      static let backButtonTitle = Rswift.StringResource(key: "backButtonTitle", tableName: "Weather", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PRESSURE
      static let pressurE = Rswift.StringResource(key: "PRESSURE", tableName: "Weather", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: WIND
      static let winD = Rswift.StringResource(key: "WIND", tableName: "Weather", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Wind direction error
      static let windDirectionError = Rswift.StringResource(key: "windDirectionError", tableName: "Weather", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: metric
      static let units = Rswift.StringResource(key: "units", tableName: "Weather", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: °C
      static let celsius = Rswift.StringResource(key: "celsius", tableName: "Weather", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: HUMIDITY
      static func humiditY(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("HUMIDITY", tableName: "Weather", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Weather", preferredLanguages: preferredLanguages) else {
          return "HUMIDITY"
        }

        return NSLocalizedString("HUMIDITY", tableName: "Weather", bundle: bundle, comment: "")
      }

      /// Value: Map
      static func backButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("backButtonTitle", tableName: "Weather", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Weather", preferredLanguages: preferredLanguages) else {
          return "backButtonTitle"
        }

        return NSLocalizedString("backButtonTitle", tableName: "Weather", bundle: bundle, comment: "")
      }

      /// Value: PRESSURE
      static func pressurE(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("PRESSURE", tableName: "Weather", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Weather", preferredLanguages: preferredLanguages) else {
          return "PRESSURE"
        }

        return NSLocalizedString("PRESSURE", tableName: "Weather", bundle: bundle, comment: "")
      }

      /// Value: WIND
      static func winD(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WIND", tableName: "Weather", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Weather", preferredLanguages: preferredLanguages) else {
          return "WIND"
        }

        return NSLocalizedString("WIND", tableName: "Weather", bundle: bundle, comment: "")
      }

      /// Value: Wind direction error
      static func windDirectionError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("windDirectionError", tableName: "Weather", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Weather", preferredLanguages: preferredLanguages) else {
          return "windDirectionError"
        }

        return NSLocalizedString("windDirectionError", tableName: "Weather", bundle: bundle, comment: "")
      }

      /// Value: metric
      static func units(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("units", tableName: "Weather", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Weather", preferredLanguages: preferredLanguages) else {
          return "units"
        }

        return NSLocalizedString("units", tableName: "Weather", bundle: bundle, comment: "")
      }

      /// Value: °C
      static func celsius(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("celsius", tableName: "Weather", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Weather", preferredLanguages: preferredLanguages) else {
          return "celsius"
        }

        return NSLocalizedString("celsius", tableName: "Weather", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "annotation", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'annotation' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
